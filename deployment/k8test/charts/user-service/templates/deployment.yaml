apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "user-service.fullname" . }}
  labels:
    app: {{ include "user-service.name" . }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ include "user-service.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "user-service.name" . }}
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:16
          command: [ 'sh', '-c', 'until pg_isready -h {{ .Values.user_service.DB_HOST }} -p 5432; do echo waiting for postgres; sleep 2; done;' ]
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.ports.user_service_port }}
              name: app
            - containerPort: {{ .Values.livenessProbe.httpGet.port }}
              name: actuator
          envFrom:
            - configMapRef:
                name: {{ include "user-service.fullname" . }}-env
          env:
            - name: POSTGRES_USER  # Имя переменной в Pod
              valueFrom: # Указание источника
                secretKeyRef:
                  name: postgres-sc  # Имя Secret
                  key: POSTGRES_USER        # Ключ в Secret
            - name: POSTGRES_PASSWORD  # Имя переменной в Pod
              valueFrom: # Указание источника
                secretKeyRef:
                  name: postgres-sc  # Имя Secret
                  key: POSTGRES_PASSWORD        # Ключ в Secret

          startupProbe: #проба старта приложения
            httpGet:
              port: 8070
              path: /health
            failureThreshold: 30
            periodSeconds: 10
            initialDelaySeconds: 30
          readinessProbe: #проба готовности приложения к приему трафика
            httpGet:
              port: 8070
              path: /health
            failureThreshold: 1
            periodSeconds: 10
            initialDelaySeconds: 30
          livenessProbe: #проба жизнеспособности приложения, что оно не зависло
            httpGet:
              port: 8070
              path: /health
            failureThreshold: 3
            periodSeconds: 10
            initialDelaySeconds: 30
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: {{ include "user-service.name" . }}
          configMap:
            name: {{ include "user-service.fullname" . }}-config